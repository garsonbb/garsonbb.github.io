[{"content":"半年多前做课设，用到HAL库，体验上，用STM32CubeMX和HAL库开发真的很快，但是代码效率确实低不少。 在课设中GPS模块用的串口传输。为了处理接收方便，使用串口的Idle中断来实现串口的不定长接收，再配合DMA就可以减轻CPU负担，把算力分配到更重要的任务上。文中讨论内容适用于Normal模式的DMA。\n Idle中断就是空闲中断，当总线上在一个字节对应的周期内未再有新的数据接收时，就会触发中断。\n 使用HAL的串口DMA 在STM32CubeMX里面的配置就不说了。 主要用到下面两个函数：\n1HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size) 2 3__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) HAL_UARTEx_RxEventCallback()是串口事件回调函数之一。\n Reception is initiated by this function call. Further progress of reception is achieved thanks to DMA services, transferring automatically received data elements in user reception buffer and calling registered callbacks at half/end of reception. UART IDLE events are also used to consider reception phase as ended. In all cases, callback execution will indicate number of received data elements.\n 在DMA半传输完成，传输完成和串口产生Idle中断时，都会触发这个回调函数。因为这个函数在HAL库中是__weak定义，就是要自己在外部再定义重名的回调函数来处置自己需要的工作。\nHAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint16_t Size) 需要调用这个函数才会进入接收状态。Size被设置到DMA相关寄存器中的CNDTR项，当DMA传数据输量达到Size的一半是会触发DMA_IT_HT中断，触发回调函数HAL_UARTEx_RxEventCallback()；当DMA传数据输量达到Size是会触发DMA_IT_TC中断，同样调用回调函数。 其中DMA_IT_HT和DMA_IT_TC是由DMA产生，Idle中断由串口产生。\n之前遇到的问题 当时做课设时，发现接收数据到Size一半就会触发回调函数，但是那时赶着完成课设，没有深究，也忘记了DMA有半传输完成中断，就直接把Size和接收数组变成待接收数据最大长度的两倍。糊弄过去了。\n现在想一想怎么避免半传输完成对传输的影响。\n HAL_UARTEx_RxEventCallback()函数只有两个参数，Size和huart都与事件类型无关，则无法通过参数分辨事件类型。 HAL库中是先去除中断标志位再调用回调函数，所以没办法在回调函数中通过查询中断标志位判断事件类型。HAL库中是先去除中断标志位再调用回调函数，详细看这个版本的HAL库STM32Cube FW_F4 V1.26.1。stm32f1xx_hal_uart.c中的3591行。 在每次调用HAL_UARTEx_ReceiveToIdle_DMA()后马上关闭半传输中断。但这样我觉得会在某些情况下引发问题。 修改库函数，在HAL库中修改HAL_UARTEx_ReceiveToIdle_DMA()，在函数内部修改掉会导致半传输中断的代码。  综上，没有什么好的办法，因为我觉得没到不得已地步不应该去修改库文件。\n在HAL库中，回调函数的风格都是每个事件只会触发一个函数名语义化对应的函数。比如，\n HAL_UART_TxHalfCpltCallback HAL_UART_TxCpltCallback HAL_UART_RxHalfCpltCallback HAL_UART_RxCpltCallback  但是HAL_UARTEx_RxEventCallback这个函数处理了4个事件，半传输完成，传输完成，Idle中断，传输出错。与Hal库一贯风格不像，或许以后会重新修改这个函数吧。\nHAL_UARTEx_RxEventCallback使用的例子。传送门\n","permalink":"https://garnote.top/post/stm32_hal_dma_uart/","title":"STM32通过DMA接收不定长串口数据"},{"content":"🤯 自我的主板从x470i更换到b350后，电脑用点左下角的win菜单关机的话就自动重启，无法关机。要到powershell里面执行shutdown才能正常关机。\n查了一下类似的现象的文章，确定了是快速启动的问题。把开始启动关了，确实可以正常关机了，但是这治标不治本。有快速启动为什么不用。👿\n在一篇博文中，发现可能是win10没有识别默认的系统，打开msconfig里面的引导一看，确实是空的。\n最后用easybcd修复就好了。\n","permalink":"https://garnote.top/post/win10_reboot/","title":"Win10关机后马上自动重启"},{"content":"加速度计和角速度计解算姿态 在只使用加速度计和陀螺仪融合数据时，流程是这样的：\n 归一化传感器输入的B系加速度 $ {\\begin{bmatrix}b\\_a_x \u0026amp; b\\_a_y \u0026amp; b\\_a_z\\end{bmatrix}}^\\top $ 。 把N系重力加速度旋转到B系 $ {\\begin{bmatrix}n2b\\_a_x \u0026amp; n2b\\_a_y \u0026amp; n2b\\_a_z\\end{bmatrix}}^\\top $ 。 N系重力加速度就是g， $ {\\begin{bmatrix} 0 \u0026amp; 0 \u0026amp; 1\\end{bmatrix}}^\\top $。 把上面两个同在B系的加速度进行叉积运算，得到误差 $ {\\begin{bmatrix}e\\_a_x \u0026amp; e\\_a_y \u0026amp; e\\_a_z\\end{bmatrix}}^\\top $ 。（得到误差反映的就是目前解算得到的姿态矩阵与真实姿态之间的误差）。 把上面获得的误差通过PI控制器补偿到传感器输入的角速度。 $ {\\begin{bmatrix}b\\_g_x \u0026amp; b\\_g_y \u0026amp; b\\_g_z\\end{bmatrix}}^\\top $ 。 使用上面已经补偿的角速度和一阶龙塔公式更新四元数。 归一化四元数。  在这个过程中，就是利用重力加速度恒等于1g并垂直向下，来修正由角速度积分得到的姿态矩阵。\n接下来确定旋转矩阵的方向：\n由 $ q_0=\\cos{\\frac{\\theta}{2}} \\quad ,q_1= - \\sin{\\frac{\\theta}{2}}\\hat{x} \\quad , q_2= - \\sin{\\frac{\\theta}{2}}\\hat{y} \\quad ,q_3= - \\sin{\\frac{\\theta}{2}}\\hat{z} $ 可算得下面的两个四元数旋转矩阵。具体计算过程可以看\n Krasjet对于四元数与三维旋转的简单讨论\n  Madgwick的文章\n 下面的$C_n^b$和$C_b^n$是和Madgwick的文章 里的一样，右手坐标系，由左手定则确定向量旋转正方向。但再实际过程中，重力加速度的指向在航向坐标系和地理坐标系的指向是一样的，旋转的是航向坐标系，所以下面的四元数旋转矩阵实际上是右手坐标系，由右手定则确定的航向坐标系旋转正方向。\n$$ C_n^b= \\begin{bmatrix} 2q_0^2-1+2q_1^2 \u0026amp; 2q_1q_2+2q_0q_3 \u0026amp; 2q_1q_3-2q_0q_2 \\\\ 2q_1q_2-2q_0q_3 \u0026amp; 2q_0^2-1+2q_2^2 \u0026amp; 2q_2q_3+2q_0q_1 \\\\ 2q_1q_3+2q_0q_2 \u0026amp; 2q_2q_3-2q_0q_1 \u0026amp; 2q_0^2-1+2q_3^2 \\end{bmatrix} $$\n$$ C_b^n= \\begin{bmatrix} 2q_0^2-1+2q_1^2 \u0026amp; 2q_1q_2-2q_0q_3 \u0026amp; 2q_1q_3+2q_0q_2 \\\\ 2q_1q_2+2q_0q_3 \u0026amp; 2q_0^2-1+2q_2^2 \u0026amp; 2q_2q_3-2q_0q_1 \\\\ 2q_1q_3-2q_0q_2 \u0026amp; 2q_2q_3+2q_0q_1 \u0026amp; 2q_0^2-1+2q_3^2 \\end{bmatrix} $$\n为了让欧拉角矩阵与四元数矩阵 $ C_n^b $ 的坐标系对应，下面的三个旋转矩阵都是右手坐标系，由左手定则确定向量旋转正方向的。 $ \\begin{bmatrix}X\\end{bmatrix} $ 指绕x轴旋转(Pitch)， $ \\begin{bmatrix}Y\\end{bmatrix} $ 指绕y轴旋转(Roll)， $ \\begin{bmatrix}Z\\end{bmatrix} $ 指绕z轴旋转(Yaw)。\n$$ \\begin{bmatrix}\\vec{A_b}\\end{bmatrix}=\\begin{bmatrix}X\\end{bmatrix}\\begin{bmatrix}Y\\end{bmatrix}\\begin{bmatrix}Z\\end{bmatrix}\\begin{bmatrix}\\vec{A_n}\\end{bmatrix} $$\n$$ \\begin{bmatrix}X\\end{bmatrix}= \\begin{bmatrix} 1 \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; \\cos\\theta_x \u0026amp; \\sin\\theta_x \\\\ 0 \u0026amp; -\\sin\\theta_x \u0026amp; \\cos\\theta_x \\end{bmatrix}\\;\\begin{bmatrix}Y\\end{bmatrix}= \\begin{bmatrix} \\cos\\theta_y \u0026amp; 0 \u0026amp; -\\sin\\theta_y \\\\ 0 \u0026amp; 1 \u0026amp; 0 \\\\ \\sin\\theta_y \u0026amp; 0 \u0026amp; \\cos\\theta_y \\end{bmatrix}\\;\\begin{bmatrix}Z\\end{bmatrix}= \\begin{bmatrix} \\cos\\theta_z \u0026amp; \\sin\\theta_z \u0026amp; 0 \\\\ -\\sin\\theta_z \u0026amp; \\cos\\theta_z \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix}\\; $$\n$$ \\begin{bmatrix}X\\end{bmatrix}\\begin{bmatrix}Y\\end{bmatrix}\\begin{bmatrix}Z\\end{bmatrix}= \\begin{bmatrix} \\cos\\theta_z\\cos\\theta_y \u0026amp; \\sin\\theta_z\\cos\\theta_y \u0026amp; -\\sin\\theta_y \\\\ -\\sin\\theta_z\\cos\\theta_x+\\cos\\theta_z\\sin\\theta_y\\sin\\theta_x \u0026amp; \\cos\\theta_z\\cos\\theta_x+\\sin\\theta_z\\sin\\theta_y\\sin\\theta_x \u0026amp; \\cos\\theta_y\\sin\\theta_x \\\\ \\sin\\theta_z\\sin\\theta_x+\\cos\\theta_z\\sin\\theta_y\\cos\\theta_x \u0026amp; -\\cos\\theta_z\\sin\\theta_x+\\sin\\theta_z\\sin\\theta_y\\cos\\theta_x \u0026amp; \\cos\\theta_y\\cos\\theta_x \\end{bmatrix}\\; $$\n$$ pitch\\left( rad \\right) = \\arctan{ \\frac{ 2q_2q_3+2q_0q_1 }{ 2q_0^2-1+2q_3^2 }} $$\n$$ roll\\left( rad \\right) =- \\arcsin{\\left( 2q_1q_3-2q_0q_2 \\right) } $$\n$$ yaw\\left( rad \\right) = \\arctan{ \\frac{2q_1q_2+2q_0q_3 }{ 2q_0^2-1+2q_1^2 }} $$\n地磁校准 YAW 在利用加速度计和陀螺仪只能较为准确地确定 ROLL 和 PITCH 角，YAW 角由加速度积分所得，MEMS传感器存在温漂，所以经过长时间积分，YAW角误差会很大。所以要加上地磁传感器来校准YAW角。\n在使用加速度计和角速度计解算姿态利用重力加速度恒等于1g并垂直向下的特点，与这相似，使用地磁传感器时，利用地磁场矢量恒指向北极。 当姿态旋转矩阵的Pitch和Roll角准确时，即现实中的B系和计算得到B系的z轴重叠（XOY平面重叠）时，把从地磁传感器获得地磁场在B系的矢量 $ {\\begin{bmatrix}b\\_m_x \u0026amp; b\\_m_y \u0026amp; b\\_m_z\\end{bmatrix}}^\\top $ 旋转到N系 $ {\\begin{bmatrix}b2n\\_m_x \u0026amp; b2n\\_m_y \u0026amp; b2n\\_m_z\\end{bmatrix}}^\\top $。 在计算得到 $ {\\begin{bmatrix}n\\_m_{north} \u0026amp; 0 \u0026amp; n\\_m_{sky}\\end{bmatrix}}^\\top $ 就是需要的恒定矢量。\n只需要加速度计和陀螺仪融合数据时的过程2和3之间加入以下过程。\n  归一化传感器输入的B系地磁矢量 $ {\\begin{bmatrix}b\\_m_x \u0026amp; b\\_m_y \u0026amp; b\\_m_z\\end{bmatrix}}^\\top $ 。把B系地磁矢量旋转到N系 $ {\\begin{bmatrix}b2n\\_m_x \u0026amp; b2n\\_m_y \u0026amp; b2n\\_m_z\\end{bmatrix}}^\\top $ 。\n$$ {\\begin{bmatrix}b2n\\_m_x \\\\ b2n\\_m_y \\\\ b2n\\_m_z\\end{bmatrix}} = C^n_b\\cdot {\\begin{bmatrix}b\\_m_x \\\\ b\\_m_y \\\\ b\\_m_z\\end{bmatrix}} $$\n  利用 $ {\\begin{bmatrix}b2n\\_m_x \u0026amp; b2n\\_m_y \u0026amp; b2n\\_m_z\\end{bmatrix}}^\\top $ 算得在x轴指向北极的坐标系中指向北极的矢量 $ {\\begin{bmatrix}n\\_m_{north} \u0026amp; 0 \u0026amp; n\\_m_{sky}\\end{bmatrix}}^\\top $ ，再把他转换回 b 系得到 $ {\\begin{bmatrix}n2b\\_m_x \u0026amp; n2b\\_m_y \u0026amp; n2b\\_m_z\\end{bmatrix}}^\\top $ 。 $$ {\\begin{bmatrix}n\\_m_{north} \\\\ 0 \\\\ n\\_m_{sky}\\end{bmatrix}} = {\\begin{bmatrix}({b2n\\_m_{x}^2+b2n\\_m_{y}^2)}^{1/2} \\\\ 0 \\\\ b2n\\_m_{sky}\\end{bmatrix}} $$\n$$ {\\begin{bmatrix}n2b\\_m_x \\\\ n2b\\_m_y \\\\ n2b\\_m_z\\end{bmatrix}} = C^b_n \\cdot {\\begin{bmatrix}n\\_m_{north} \\\\ 0 \\\\ n\\_m_{sky}\\end{bmatrix}} $$\n  叉积计算误差，误差补偿。 $$ {\\begin{bmatrix}e\\_m_x \\\\ e\\_m_y \\\\ e\\_m_z\\end{bmatrix}} = {\\begin{bmatrix}n2b\\_m_x \\\\ n2b\\_m_y \\\\ n2b\\_m_z\\end{bmatrix}} \\times {\\begin{bmatrix}b\\_m_x \\\\ b\\_m_y \\\\ b\\_m_z\\end{bmatrix}} $$ $$ {\\begin{bmatrix}e\\_x \\\\ e\\_y \\\\ e\\_z\\end{bmatrix}} = {\\begin{bmatrix}n2b\\_m_x \\\\ n2b\\_m_y \\\\ n2b\\_m_z\\end{bmatrix}} \\times {\\begin{bmatrix}b\\_m_x \\\\ b\\_m_y \\\\ b\\_m_z\\end{bmatrix}} + {\\begin{bmatrix}e\\_a_x \\\\ e\\_a_y \\\\ e\\_a_z\\end{bmatrix}} $$\n  一些思考  同一姿态角情况下，在加速运动时测得加速度，与稳定状态下的加速度不相同，会引起姿态角的误差。 地磁传感器校正时，运算过程中去掉z轴分量，可能会降低噪音？效果更好？ 在把误差补偿到角速度时，用了一个PI控制器，作用应该是类似一个作用与于误差的滤波器。  参考文献 Open source IMU and AHRS algorithms - 1\nOpen source IMU and AHRS algorithms - 2\nKrasjet对于四元数与三维旋转的简单讨论\n","permalink":"https://garnote.top/post/mahonyahrs/","title":"四元数姿态解算-MahonyAHRS"},{"content":"stm32cubeMX中Debug方式设置错误导致锁定芯片 昨天用clion和stm32cubeMX调试。创建好Project之后，忘记在cubeMX，SYS选项卡中选择DEBUG为Serial Wire。然后直接在clion中下载程序。然后下载失败，芯片锁了。我的daplink和jlink都认不出来了。\n购买到二手拆机片 这段时间，芯片价格涨价。买了几个二手拆机片，都是设置了只读，或者是还有程序在芯片里跑。我直接用daplink下载程序，只是提示下载失败。我不太懂DAPLink的使用。插上JLink后，在Keil中的Debug选项卡中识别到芯片之后，弹出： 出现这个，应该有这几种可能\n 芯片坏了 芯片读保护 芯片焊接有问题，NRST复位按钮那里有问题  解决方法 下载安装JLink的工具包https://www.segger.com/downloads/jlink/#J-LinkSoftwareAndDocumentationPack Debug方式设置错误导致锁定芯片 打开J-Flash Lite选择对应芯片，我的是STM32F103C8。之后，点Erase Chip。是不行的，似乎不能Reset芯片。 所以之后手动，点了Erase Chip，快速多次按PCB上的Reset按钮，提示Reset 🆗马上停下，这样就可以清空芯片。芯片也可以被识别了。\n购买到二手拆机片 打开J-Flash V6.98a，Create new project 选择你对应的芯片 连接MCU 擦除芯片 先解锁芯片，再擦除。 一般到这就修好了，不然可能芯片坏了（电路没焊接错的话） 其他情况 打开STM32 Unlock 看到命令行窗口，输入你使用的芯片系列对应的数字。\n","permalink":"https://garnote.top/post/stm32_locked/","title":"解决多种原因导致的STM32芯片被锁定"},{"content":"1clear,clc % HPF 2 3N = 2; % 二阶 4fs=1000; % 采样率Hz 5fc=50; % 3dB截止频率 6OmegaC=(fc*2*pi/1000) /pi; % 截止频率归一化 7 8[ b, a ] = butter(N,OmegaC,\u0026#39;HIGH\u0026#39;); 9 10freqz(b,a); 1clear,clc % LPF 2 3N = 2; % 二阶 4fs=1000; % 采样率Hz 5fc=50; % 3dB截止频率 6OmegaC=(fc*2*pi/1000) /pi; % 截止频率归一化 7 8[ b, a ] = butter(N,OmegaC,\u0026#39;LOW\u0026#39;); 9 10freqz(b,a); butter函数说明https://ww2.mathworks.cn/help/signal/ref/butter.html，默认是生成数字滤波器的传递函数系数，用双线性变换从模拟滤波器转为数字滤波器。\n得到传递函数的系数b,a。进行反z变换到离散域，就可以得到差分方程。\n$$ \\frac{Y(z)_{zs}}{X(z)}=H(z)=\\frac{B(z)}{A(z)} $$\n$$ B(z)=\\sum_{j=0}^m{b_{m-j}z^{-j}}=b_m+b_{m-1}z^{-1}+\u0026hellip;+b_0z^{-m} \\\\\\ A(z)=\\sum_{i=0}^n{a_{n-i}z^{-i}}=a_n+a_{n-1}z^{-1}+\u0026hellip;+a_0z^{-n} $$\n在Matlab得到的[ b, a ]中，$b = [b_{m},b_{m-1}, \\ \u0026hellip;\\ ,b_{0}]，a = [a_{n},a_{n-1}, \\ \u0026hellip;\\ ,a_{0}]$\n","permalink":"https://garnote.top/post/butter_matlab/","title":"使用Maltab设计二阶互补滤波器"},{"content":"安装win虚拟机 在win安装时，会看不到虚拟的硬盘。\n所以在virtio-win-xxx这个光盘中依次找到以下驱动安装\n Balloon NetKVM vioserial viostor  之后就可以看到硬盘了。\nnps内网穿透 首先不建议在在docker中使用nps。\nnpcDocker的网络模式是bridge时，不能通过局域网ip访问网络模式是custom:br的docker。\nnpcDocker的网络模式是custom:br时，不能通过局域网ip访问网络模式是bridge的docker。\n为什么custom:br会这样，我在unraid论坛找到这样的描述。\n Bridge mode\n shares IP with unRAID usually ok but sometimes annoying because container wants a specific port that\u0026rsquo;s already in use by unRAID or another container. your network cannot distinguish between container traffic and NAS services (hard to perform QoS or specific VPN routing)  Custom eth0/br0\n allows your container to have a different IP from unRAID. This is mostly OK since this means stuff like QoS and selective VPN routing can be done. However, this prevents all communications between the container and unRAID (which prevents stuff like reverse proxying) unless you have VLANs or extra network interfaces.   ","permalink":"https://garnote.top/post/unraid/","title":"在使用unraid遇到的问题"},{"content":"下载DSP库  可以在ST官网下载 可以在Arm这下载最新版本的库https://github.com/ARM-software/CMSIS_5/releases  下载.pack，用压缩软件打开查看 进入CMSIS\\DSP\\Lib\\GCC\\提取libarm_cortexM4lf_math.a 进入CMSIS\\DSP\\Include\\提取arm_math.h   在CMakeList.txt中添加链接 1include_directories(包含arm_math.h的文件夹路径) 2target_link_libraries(${PROJECT_NAME}.elf ${CMAKE_SOURCE_DIR}/...你自己的路径/libarm_cortexM4lf_math.a)   开启FPU  只需要在CMakeLists中#Uncomment for hardware floating point下的配置去除注释就可以了，不需要额外的define标签。 之所以不用像Keil一样额外的define，因为在stm32f407xx.h(2017)中第52行默认是已经是 #define __FPU_PRESENT 1U， 而且在core_cm4.h(V5.0.8)中第100行，在__GNUC__默认是 #define __FPU_USED 1U  ","permalink":"https://garnote.top/post/94/","title":"使用CLion开发-STM32F4开启FPU并调用DSP库"},{"content":"哪颗星是您？\n","permalink":"https://garnote.top/post/91/","title":"哪颗星是您？"},{"content":"","permalink":"https://garnote.top/post/fuzzypid/","title":"模糊PID用到的模糊逻辑表"},{"content":"手算 这里用的模糊逻辑表是模糊PID中P的表。\n 先摆上我的隶属度表     状态变量量化等级 -4 -3 -2 -1 0 1 2 3 4     NB 0 0 0 0 0 0 0 0.5 1   NM 0 0 0 0 0 0.2 1 0.2 0   NS 0 0 0 0 0.1 1 0.4 0 0   ZO 0 0 0 0.2 1 0.2 0 0 0   PS 0 0 0.4 1 0.1 0 0 0 0   PM 0 0.2 1 0.2 0 0 0 0 0   PB 1 0.5 0 0 0 0 0 0 0    计算过程看下面的图吧。  计算的法则，两个值交取最小，两个值并取最大。 图中产生的4条模糊规则，但是实际只有两个结果，PB和PM，则两个PB取并集，两个PM取并集。得到两个对应值。      Matlab计算   在命令行输入fuzzy打开模糊工具箱，设置两个输入。   配置隶属度函数，我这里是三个隶属度函数都一样。然后导出。我导出的是P.fis。   打开simulink，构建以下的系统。如果模块的名字不知道可以下面的两张图片，图标下面有名字。 双击模糊控制模块来选择模糊工具箱生成的规则。填写路径。 利用Zero-order-hold来达到离散化的效果。如果在输入的数据里（如下面的Excel截图），设置信号改变的频率是1Hz，那上面的Zero-order-hold的Simpletime是EC的量化等级的数量，下面的Zero-order-hold的Simpletime为1。   在Simulink内打开Testmanger。选择需要测试的系统，根据数据长度选择测试的时长。并导入数据。导入数据后要Map通过才行。   点Run开始测试模型，一瞬间就就计算完了。   右键P/output，导出到工作区。使用下面这段代码就可以导出成Excel。代码需要根据你的量化等级数量修改\n1U = []; 2for i = 1:81 % count of all cell in the table 3U(i) = getdatasamples(tableP,i); % tableP: 导出的数据 4end 5E = -4:1:4; 6data=[]; 7data(:,1) = E\u0026#39;; 8for i = 1:9 % 9是Ec的数量 9data(i,2:10) = round(U(1+9*(i-1):9*i)); % 2:10 excel的行单元格 10%data(i,2:10) = U(1+9*(i-1):9*i); %直接输出浮点型 11end 12[m, n] = size(data); 13data_cell = num2cell(data); 14title = {\u0026#39;E\\EC\u0026#39;,\u0026#39;-4\u0026#39;, \u0026#39;-3\u0026#39;, \u0026#39;-2\u0026#39;, \u0026#39;-1\u0026#39;,\u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;};% universe 15result = [title; data_cell]; 16s = xlswrite(\u0026#39;Fuzzy_P.xlsx\u0026#39;, result);   完成了\n  ","permalink":"https://garnote.top/post/fuzzyctrl/","title":"如何得到模糊控制离线控制表？手算和Matlab"},{"content":"做一个倒立摆 这个倒立摆，一开始是打算用自己做的结构，用木板和铝型材搭，用57步进电机驱动。这个结构有很大的问题，步进电机悬空，下盘不稳，很容易就整个结构一起震动，难以平衡。没上导线环，会绕线。只剩一张他的遗照了。\n图里还用了一个木制法兰盘23333用502做的（简直是魔鬼），连接到转轴上也是用502. 接下来直接去淘宝买了一套结构.\n关键的代码也就是下面两个pid环。\n两个pid环的代码 int PID_Angle_Cal(int ang_Now, int ang_Target) { float dError,Bias=0; static float iError; Bias = ang_Now - ang_Target; iError += Bias; if (iError\u0026gt; 2200)\tiError=2200; if (iError\u0026lt;-2200)\tiError=-2200;//iError上下限 dError = Bias - last_Bias; last_Bias = Bias; return ang_p * Bias + ang_i * iError + ang_d * dError; } int PID_Pos_Cal(int pos_Now, int pos_Target) { float dError; static float Bias,last_Bias,iError; Least = pos_Now - pos_Target; Bias *=0.8; Bias += Least * 0.2;//一阶低通滤波 dError = Bias - last_Bias; last_Bias = Bias; iError += Bias; if (iError\u0026gt; 1900)\tiError=1900; if (iError\u0026lt;-1900)\tiError=-1900; return Bias * pos_p + iError * pos_i + dError * pos_d; } 调试 一开始按网上的经验，只用pd控制，调了好久，一直效果不好，小幅抖动到大幅抖动，然后掉了。然后，突然意识到，会不会是Bias较小是时候，电机的扭力和控制量的关系与Bias较大时的关系相差较大。就想到，加上i的消除静差的作用应该就可以了。加上i之后，再调了一下就有下面的效果了。\n补充一下调试过程\n 12位adc，读取电位器的值是0-4095，距离竖立位置的10%差值(左右5%)大概是400。我的电机控制量满速是16800。 我就大概取P位16800/(400/2)=84,可以看到倒立摆可以左右摇晃不倒1-2秒。 然后随缘调d，调到倒立摆比较快左右摇晃不倒更久一点时间，然后慢慢调小d，直到出现这个现象，在倒下前只往一个方向倾倒。 调i，i调起来比较麻烦，i的大小和控制频率有关。先说i的积分上限，我先把pid控制关闭，直接调电机速度控制量，找到电机将动未动的临界点(我大概是2200)，把这时的控制量作为i的积分上限。观察发现仅在pd控制时(点2中说的现象)，距离竖立位置的误差量大概是50-200，然后我取100来计算，用2200/100 = 22，我希望在10次计算(位置误差一直没有减小时)后达到积分上限，22/2=2.2。 在控制频率一定时(我的PID的控制频率是100Hz)，i越大，系统的抖动越大，i越小，i的控制作用越不明显。 最后慢慢微调pid三个量得到更好的效果。  ","permalink":"https://garnote.top/post/pid_pendulum/","title":"pid控制的倒立摆"},{"content":"先分享一首音乐。\n我的2019 今年是运气很好的一年。\n年中成功获得了从应用化学到电子信息类的转专业资格。转专业的考核主要看两点：绩点和面试。我在面试这部分做的很不好，面试的稿子准备不太行，因为我现实比较自闭，十分抗拒向别人表达自己。加之面试时面对10人左右和全程的英文交流，很紧张＞﹏＜，说话一卡一卡，还要忘记单词。我自己都觉得这是一次非常差的面试。幸运的是，我还是顺利的到了信工学院。\n年中，参加了全国电子设计大赛。选了仪器题，用一个夹板电容来测出夹板电容之间的A4纸数目。Emmmm，一开始方案确定的时候出了点问题。最后比赛那天，测出的数目都与正确数目有+-一到两张的偏差。最后拿了个参与奖。害，就当是买了个教训。比赛之后，趁着暑假，在淘宝买了机械结构，做了一个倒立摆。学习了一下PID算法（这个倒立摆的文章还没写(/▽＼)）。之后又了解了一下flutter，开始写一个关于bgm.tv的app。写了几天弃坑了。。现在完善一下，直接弃坑。。。（浪费时间）\n新学期开始之后。我在学新课的同时，要补修高数，线代，专业导论（虽说逃了挺多）。令我最心态爆炸，平均一个星期3次实验，也就是说，周一到五只有两天有午觉睡（实验一般是13：30或者13：50开始上课）。在前半学期，还有耗两个晚上上选修。(；′⌒`)，过于难受，太累了。\n上课真的要控制住自己(ಥ _ ಥ)，不要拿出手机，一看手机就要花时间课后时间来补回来。课后时间真的太宝贵，今年坚决要利用好。\n最大的敌人，拖延症，今年还是没有战胜它（这篇文章拖到了今天充分体现了。但是原因一方面是真的拖延，还有一方面是我讨厌写任何文章(ಥ _ ಥ)）。希望今年可以提升自己的执行力和效率吧。\n","permalink":"https://garnote.top/post/2019/","title":"枯燥无味的2019"},{"content":"Clion  下载地址 利用edu邮箱可以申请免费授权，一年一申。传送门 解压之后在源码目录执行sudo ./clion-2019.3/bin/clion.sh安装。  STM32CubeMx  安装jre.sudo apt install default-jre. 下载STM32CubeMx. 解压之后进入目录执行sudo ./SetupSTM32CubeMX-5.4.0.linux安装(要先给这个文件加上可执行权限)。  arm-none-eabi-gcc  下载arm-none-eabi-gcc 解压到/usr/lib/gcc. vi /etc/profile 在最后一行加入export PATH=$PATH:/usr/lib/gcc/gcc-arm-none-eabi-9-2019-q4-major/bin注意修改目录位置. 重启生效PATH  OpenOCD  OpenOCD代码托管在这里，选择最新版本下载https://sourceforge.net/projects/openocd/files/openocd/ 解压，进入源码目录 ./configure -help可查看帮助 ./bootstrap生成配置文件 ./configure --enable jlink添加jlink支持，可能会提示缺少什么库，按提示安装 sudo make \u0026amp;\u0026amp; make install安装。重启生效PATH 在源码目录下sudo cp contrib/60-openocd.rules /etc/udev/rule.d/ 不进行这部操作的话，在非root用户下运行Clion时，Clion会无权访问调试器。  最后 运行Clion，在Plugins中搜索stm32并安装第一个插件，重启Clion。New Project 选STM32CubeMX。在STM32CubeMX的Project Settings中，将Toolchain/IDE选成SW4STM32。最后Generate Code. Enjoy it.\n","permalink":"https://garnote.top/post/stm32_clion/","title":"Ubuntu下使用Clion+STM32CubeMx+OpenOCD进行开发"},{"content":"","permalink":"https://garnote.top/post/44/","title":"2019秋"},{"content":"屏幕的参数 在一个月前，终于决定把用了4，5年的老屏幕换了。 花了750顺丰包邮了一片全新A屏LM270WR3-SSA1。这是27寸的4k屏幕，100%sRGB色域，抖动10Bit。\n华强北驱动板，有2xhdmi，2xdp，支持4k60hz，2k144hz，1080p240hz。好贵啊＞﹏＜。 组装好之后的照片， 别问我为什么用木板作为背板材料。问就是穷。亚克力好贵，cnc更不用说。先用CAD画好图纸，发给淘宝或者拿到附近的加工点制作。必须说一下屏幕的datasheet，我的第一片屏幕的背板是直接完全按照datasheet画的，但是木板切好后一放到屏幕后就发现了有不少的空位偏移了，然后我目测一下孔位偏移的距离，调好后马上再打一版，目测不准，还是不能安装。（哭唧唧）。然后只好拿着丁字尺慢慢量。一共切了3片木板，层叠安装，最里层的1mm，外两层2mm。\n总的成本    材料 1449￥     屏幕 750￥   背板 100￥   驱动板 400￥   电源 13￥   屏幕支架 130￥   校色仪 56￥     校色 忙完开学的事情后，租了i1Display配合displayCal来做最后的校色。校色之后的效果ヾ(•ω•`)o 如果你也是像我一样在淘宝上买华强北驱动板的话，在校色的开始之前，要先把驱动板的设置重置一下，因为我这里试过驱动板显示没有打开的选项但是实际上是打开的。\n还有如果你买的是我的同款驱动板，在用displayCal校色的第一步要调整屏幕的RGB分量，要调整这三个量要切换到菜单里的色彩-色温-USER再按确定就可以修改了。\n","permalink":"https://garnote.top/post/diyascreen/","title":"4k-IPS-27寸屏幕（LM270-WR3-SSA1）组装DIY"},{"content":"19年7月23日更新的\n31.216.147.136 eu.api.mega.co.nz 31.216.147.135 eu.api.mega.co.nz 31.216.147.134 eu.api.mega.co.nz 31.216.148.13 eu.static.mega.co.nz 31.216.148.11 eu.static.mega.co.nz 89.44.169.132 eu.static.mega.co.nz 117.18.237.188 g.cdn1.mega.co.nz 31.216.147.130 mega.co.nz 31.216.148.10 mega.nz 89.44.169.135 mega.nz 31.216.147.156 w.api.mega.co.nz 31.216.147.161 w.api.mega.co.nz 31.216.147.156 w.api.mega.co.nz ipconfig /flushdns  ","permalink":"https://garnote.top/post/mega/","title":"MegaHost"},{"content":"坑 一开始我不知到苏菲只有UEFI，直接用UltraISO写了个启动盘想装1903的win10用各种办法都不能从U盘启动。。\n正确的食用方法  把U盘格式化成FAT32，把ISO解压到U盘根目录。 开机，先长按音量-，再单击电源键即可。  在1.的过程中，你可能要用到\nDism /Split-Image /ImageFile:C:\\sources\\install.wim /SWMFile:C:\\sources\\install.swm /FileSize:3900  把install.wim分成几个小的文件得以放入fat32的U盘。（自己修改文件路径\n记录一下其他命令 查电池信息\npowercfg /BatteryReport  ","permalink":"https://garnote.top/post/surface_upgarde/","title":"surface的U盘启动"},{"content":" stm32芯片封装-\u0026gt;点我点我 需要用Ultra Librarian转为常见的Cendence、Altium、Pads格式。 stm32芯片的固件库-\u0026gt;传送门 keil .pack 传送门  ","permalink":"https://garnote.top/post/stm32_source/","title":"stm32官方资源的一些记录"},{"content":"我又来了！ 终于决定把博客从Hexo搬来Typeecho了。主要原因是我的设备比较多，每台机都部署Hexo环境太麻烦了，同步起来也麻烦。更重要的是handsome这个主题很符合我的需求。\n 立一个Flag，每个月至少写一篇博文。\n","permalink":"https://garnote.top/post/start/","title":"我又来了！"}]